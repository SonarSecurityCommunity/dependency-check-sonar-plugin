/*
 * Dependency-Check Plugin for SonarQube
 * Copyright (C) 2015-2019 dependency-check
 * philipp.dallig@gmail.com
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package org.sonar.dependencycheck.parser.element;

import java.util.Optional;

import org.sonar.api.config.Configuration;
import org.sonar.api.utils.log.Logger;
import org.sonar.api.utils.log.Loggers;
import org.sonar.dependencycheck.base.DependencyCheckUtils;

import edu.umd.cs.findbugs.annotations.NonNull;
import edu.umd.cs.findbugs.annotations.Nullable;

public class Vulnerability {

    private static final Logger LOGGER = Loggers.get(Vulnerability.class);

    private final String name;
    private final String source;
    private final String severity;
    private final String description;
    private final CvssV2 cvssv2;
    private final CvssV3 cvssv3;
    private final String[] cwe;

    public Vulnerability(@NonNull String name, @NonNull String source, @NonNull String description, @Nullable String[] cwe, @Nullable CvssV2 cvssV2, @Nullable CvssV3 cvssV3, @Nullable String severity) {
        this.name = name;
        this.source = source;
        this.severity = severity;
        this.description = description;
        this.cwe = cwe;
        this.cvssv2 = cvssV2;
        this.cvssv3 = cvssV3;
    }

    @NonNull
    public String getName() {
        return name;
    }

    @NonNull
    public String getSource() {
        return source;
    }

    @NonNull
    public Float getCvssScore(Configuration config) {
        return getCvssScore(true, config);
    }

    @NonNull
    public Float getCvssScore(boolean preferCvssv3, Configuration config) {
        if (preferCvssv3) {
            Cvss cvss = getCvssV3().orElse(getCvssV2().orElse(null));
            if (cvss != null) {
                return cvss.getScore();
            }
        } else {
            Cvss cvss = getCvssV2().orElse(getCvssV3().orElse(null));
            if (cvss != null) {
                return cvss.getScore();
            }
        }
        return DependencyCheckUtils.severityToScore(getSeverity(preferCvssv3), config);
    }

    @NonNull
    public String getSeverity() {
        return getSeverity(true);
    }

    @NonNull
    public String getSeverity(boolean preferCvssv3) {
        if (severity != null) {
            return severity;
        }
        if (preferCvssv3) {
            Cvss cvss = getCvssV3().orElse(getCvssV2().orElse(null));
            if (cvss != null) {
                return cvss.getSeverity();
            }
        } else {
            Cvss cvss = getCvssV2().orElse(getCvssV3().orElse(null));
            if (cvss != null) {
                return cvss.getSeverity();
            }
        }
        LOGGER.warn("vulnerability {} without severity. Using MEDIUM", name);
        return "MEDIUM";
    }

    @NonNull
    public String getDescription() {
        return description;
    }

    public Optional<String[]> getCwe() {
        return Optional.ofNullable(cwe);
    }
    /**
     * @return the cvssV2
     */
    public Optional<Cvss> getCvssV2() {
        return Optional.ofNullable(cvssv2);
    }
    /**
     * @return the cvssV3
     */
    public Optional<Cvss> getCvssV3() {
        return Optional.ofNullable(cvssv3);
    }

}
